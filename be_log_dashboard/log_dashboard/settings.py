"""
Django settings for log_dashboard project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from datetime import timedelta
from pathlib import Path
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-36ocev3!rjb0$zgtn1^w$avpz0ow%1e$*4o7$8^c6ko-cmgz%j"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS=['*']
CORS_ALLOWED_ORIGINS = [
'http://localhost:3000','http://127.0.0.1:3000'
]
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:3000','http://127.0.0.1:3000'
]
CORS_ALLOW_CREDENTIALS=True

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "drf_api_logger",  # package to log the api requests made to backend services automatically
    "django_guid",  # package to help track a single api request in the log made by programmer manually
    "rest_framework",  # rest framework
    "rest_framework_simplejwt",  # rest framework simple jwt
    "corsheaders",  # cors headers
    'django_extensions',
    # moduels
    "logs.apps.LogsConfig",
    "user_auth.apps.UserAuthConfig",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # cors headers middleware
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",  # per-request internationalization is enabled, client requests will respect the Accept-Language header where possible
    "drf_api_logger.middleware.api_logger_middleware.APILoggerMiddleware",  # package to log the api requests made to backend services automatically
    "django_guid.middleware.guid_middleware",  # package to help track a single api request in the log made by programmer manually
]

# rest framework JWT authentication

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=120),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
}


ROOT_URLCONF = "log_dashboard.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "log_dashboard.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

# LANGUAGE_CODE = "ja-jp"
LANGUAGE_CODE = "en-en"


LANGUAGES = [
    ("ja", _("Japanese")),
    ("en", _("English")),
]

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

#

# drf-api logger configuration, this package helps to auto log the api request
DRF_API_LOGGER_DATABASE = False
DRF_LOGGER_QUEUE_MAX_SIZE = 50
DRF_LOGGER_INTERVAL = 10
DRF_API_LOGGER_EXCLUDE_KEYS = ["password", "token", "access", "refresh"]
DRF_API_LOGGER_DEFAULT_DATABASE = "default"
DRF_API_LOGGER_SLOW_API_ABOVE = 200
DRF_API_LOGGER_TIMEDELTA = 330
DRF_API_LOGGER_TIMEDELTA = 540  # UTC + 540 Minutes = JST (9:Hours ahead from UTC)
DRF_API_LOGGER_PATH_TYPE = "ABSOLUTE"

# loggin configuration
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} [%(correlation_id)s]  {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {asctime} {message} ",
            "style": "{",
        },
    },
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
        "correlation_id": {"()": "django_guid.log_filters.CorrelationId"},
    },
    "handlers": {
        "console": {
            "filters": ["require_debug_true", "correlation_id"],
            "class": "logging.StreamHandler",
            "formatter": "simple",
            "level": "DEBUG",
        },
        "debug_file": {
            "filters": ["require_debug_true", "correlation_id"],
            "class": "logging.FileHandler",
            "filename": "backend_logs/dev/dev_log_file.log",
            "formatter": "verbose",
            "level": "DEBUG",
        },
        "all_timed_rotating": {
            "filters": ["correlation_id"],
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": "backend_logs/all_logs_file.log",
            "when": "midnight",
            "interval": 1,  # from one midnight to another midnight logs
            "backupCount": 30,  # store the logs of last thirty days
            "encoding": "utf-8",
            "level": "INFO",
        },
        "error_timed_rotating": {
            "filters": ["correlation_id"],
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": "backend_logs/error_logs_file.log",
            "when": "midnight",
            "interval": 1,  #  #from one midnight to another midnight logs
            "backupCount": 30,  # store the logs of last thirty days
            "encoding": "utf-8",
            "level": "ERROR",  # only logs with severity errors or above
        },
    },
    "loggers": {
        "app": {
            # all_timed_rotating and error_timed_rotating is for the pord logging handlers
            # consolse and the debub_file are the dev logging handlers
            "handlers": [
                "all_timed_rotating",
                "error_timed_rotating",
                "debug_file",
                "console",
            ],
            "level": "DEBUG",
        }
    },
}
